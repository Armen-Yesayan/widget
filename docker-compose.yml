version: '3.8'

services:
  backend:
    container_name: backend
    build:
      context: .
      target: production
    volumes:
      - backend-node-modules:/usr/src/app/node_modules
    ports:
      - ${SERVER_PORT}:${SERVER_PORT}
    env_file:
      - .env
    networks:
      - backnet
    depends_on:
      - postgresqldb
    environment:
      DB_HOST: backend-postgresqldb
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    stop_grace_period: "3s"
    tty: true
    deploy:
      resources:
        limits:
          cpus: "${DOCKER_WEB_CPUS:-0}"
          memory: "${DOCKER_WEB_MOMERY:-0}"
    healthcheck:
      test: "${DOCKER_WEB_HEALTHCHECK_TEST:-curl localhost:SERVER_PORT/up}"
      interval: "60s"
      timeout: "3s"
      start_period: "5s"
      retries: 3
  postgresqldb:
    container_name: postgresqldb
    image: postgres:14.1-alpine
    networks:
      - backnet
    environment:
      POSTGRES_ROOT_PASSWORD: secret
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    volumes:
      - db:/var/lib/postgresql/data
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    stop_grace_period: "3s"
networks:
  backnet:
volumes:
  db:
  backend-node-modules: